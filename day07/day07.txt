1  进程
    多任务:生活中，多个任务同时进行
    p = Process(target=xxx, args=(tuple))
    target  目标函数，进程启动后要被执行的函数
    args  主进程给子进程传参，args=tuple
    p.start()
    p.join()    # join()作用是主进程等待子进程结束
    os.getpid()
    os.getppid()

    面向对象创建
        自定义类继承自Process
        重写run方法

    进程之间相互独立
        不共享任何变量

    进程池
        规定最大进程数，用这几个进程返程所有任务
        pol = Pool(3)
        pol.apply_async(func, args)
        pol.close()
        pol.join()


        练习：多进程拷贝文件夹

2  线程
        线程，有时被称为轻量进程(Lightweight Process，LWP），是程序执行流的最小单元。一个标准的线程由线程ID，
    当前指令指针(PC），寄存器集合和堆栈组成。另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，
    线程自己不拥有系统资源，只拥有一点儿在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。
    一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。由于线程之间的相互制约，
    致使线程在运行中呈现出间断性。线程也有就绪、阻塞和运行三种基本状态。就绪状态是指线程具备运行的所有条件，
    逻辑上可以运行，在等待处理机；运行状态是指线程占有处理机正在运行；阻塞状态是指线程在等待一个事件（如某个信号量），
    逻辑上不可执行。每一个程序都至少有一个线程，若程序只有一个线程，那就是程序本身。

        线程是程序中一个单一的顺序控制流程。进程内有一个相对独立的、可调度的执行单元，是系统独立调度和分派CPU的基本单位
    指令运行时的程序的调度单位。在单个程序中同时运行多个线程完成不同的工作，称为多线程。

    线程安全问题
    lock = threading.Lock() #  创建锁
    lock.acquire()  # 枷锁
    lock.release()  # 释放

3  队列
    what is 队列？  先进先出
    栈，后进先出
    线程与线程之间交互，使用队列的机制，称之为生产者消费者模型

    q = Queue(5)
    q.put('xxx', True, 5)
    q.get(True, 3)  #  等三秒，如果还是get不到，就报错;(因为如果不设置timeout时间，它会一直等)
    q.full()
    q.empty()   # 返回  boolean
    q.qsize()

4  多线程爬虫
    爬虫思路:
    (1)给一个url
    (2)发送请求，获取响应
    (3)解析响应，保存数据
    多线程爬取思路见图
